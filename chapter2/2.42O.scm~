#lang planet neil/sicp

(define (enumerate-interval low high)
  (if (> low high)
      nil
      (cons low (enumerate-interval (+ low 1) high))))

(define (accumulate op initial sequence)
  (if (null? sequence)
      nil
      (op (car sequence)
          (accumulate op initial (cdr sequence)))))

(define (flatmap proc seq)
  (accumulate append nil (map proc seq)))

(define (filter proc sequence)
  (cond ((null? sequence) nil)
        ((proc (car sequence))
         (cons (car sequence)
               (filter proc (cdr sequence))))
        (else (filter proc (cdr sequence)))))




(define empty-board '())

(define (adjoin-position new-row k rest-of-queens)
  (cons new-row rest-of-queens))

(define (safe? k position)
  (iter-check (car position) 
              (cdr position)
              1))

(define (iter-check row-of-new-queen rest-of-queens i)
  (if (null? rest-of-queens)  ; 下方所有皇后检查完毕,新皇后安全
      #t
      (let ((row-of-current-queen (car rest-of-queens)))
        (if (or (= row-of-new-queen row-of-current-queen)           ; 行碰撞
                (= row-of-new-queen (+ i row-of-current-queen))     ; 右下方碰撞
                (= row-of-new-queen (- row-of-current-queen i)))    ; 左下方碰撞
            #f
            (iter-check row-of-new-queen 
                        (cdr rest-of-queens)    ; 继续检查剩余的皇后
                        (+ i 1))))))            ; 更新步进值

(for-each (lambda (pos)
                    (begin
                        (display pos)
                        (newline)))
                (queens 8))