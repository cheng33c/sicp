#lang planet neil/sicp

(define (filtered-accumulate filter combiner null-value term a next b)
    (define (iter a null-value)
      (cond ((> a b) null-value)
            ((filter a) (iter (next a) null-value))
            (else (iter (next a) (combiner (term a) null-value)))))
    (iter a null-value))

(define (square x) (* x x))
(define (prime? n)
  (define (fast-prime? n times)
    (cond ((= times 0) true)
          ((fermat-test n) (fast-prime? n (- times 1)))
          (else false)))
  (define (fermat-test n)
    (define (try-it a)
      (= (expmod a n n) a))
    (try-it (+ 1 (random (- n 1)))))
  (define (expmod base exp m)
    (cond ((= exp 0) 1)
          ((even? exp)
           (remainder (square (expmod base (/ exp 2) m)) m))
          (else
           (remainder (* base (expmod base (- exp 1) m)) m))))
  (fast-prime? n 100))

(define (sum-iter filter term a next b)
  (filtered-accumulate + 0 filter term a next b))

(define (identity x) (x))
(define (next x) (+ x 1))

(sum-iter prime? identity 2 next 5 )