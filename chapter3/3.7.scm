(define (make-account balance pwd)
  (define (check-pwd enter-pwd)
    (define (iter current-pwd)
      (cond ((null? pwd) #f)
            (if (pair? pwd)
                (if (eq? (car pwd) enter-pwd)
                    #t
                    (iter (cdr current-pwd)))
                (if (eq? pwd enter-pwd) #t #f))
            (else (error "ERROR CHECK-PWD"))))
    (iter enter-pwd))
  (define (joint new-pwd)
    (set! pwd (cons pwd new-pwd)))
  (define (withdraw amount)
    (if (>= balance amount)
        (begin (set! balance (- balance amount))
               balance)
        "Insufficient funds"))
  (define (deposit amount)
    (set! balance (+ balance amount))
    balance)
  (define (dispatch enter-pwd m)
    (if (check-pwd enter-pwd pwd)
        (cond ((eq? m 'withdraw) withdraw)
              ((eq? m 'deposit) deposit)
              ((eq? m 'joint) joint)
              (else (error "Unknow request -- MAKE-ACCOUNT" m)))
        (error "Incorrect password")))
  dispatch)

(define (make-joint account old-pwd new-pwd)
  ((account old-pwd 'joint) new-pwd))

;; test
(define peter-acc (make-account 100 'peter))
(define paul-acc
  (make-joint peter-acc 'peter 'paul))
