(load "make-table.scm")


(define (lookup table key)
  (define (iter current-table)
    (cond ((null? current-table)
	   (error "can't find the key" key))
	  ((eq? (caar table) key) (cdar table))
	  (else (iter (cdr current-table)))))
  (iter (cdr table)))

(define (insert! table key value)
  (define (iter current-table)
    (let ((current-key (car key)))
      (cond ((null? current-table)
	     (set! table (cons table (cons key value))))
	    ((eq? (caaar current-table) key)
	     (cons (cdr (caar current-table)) value))
	    (else (iter (cdr current-table))))))
  
  (cond ((pair? key)
	 (begin
	   (iter (car table))
	   (insert! table (cdr key) value)))
	(else (iter (car table)))))

(define my (make-table))

