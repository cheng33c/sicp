#lang planet neil/sicp

(define (next x) (+ x 1))
(define (identity x) x)

(define (accumulate combiner null-value term a next b)
  (define (iter a null-value)
    (if (> a b)
        null-value
        (iter (next a) (combiner (term a) null-value))))
  (iter a null-value))

(accumulate * 1 identity 1 next 6)
(accumulate + 0 identity 1 next 6)


(define (accumulate2 combiner null-value term a next b)
  (define (rec a null-value)
    (if (> a b)
        null-value
        (combiner a (rec (next a) null-value))))
  (rec a null-value))

(accumulate2 * 1 identity 1 next 6)
(accumulate2 + 0 identity 1 next 6)